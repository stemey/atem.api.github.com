package org.atemsource.atem.api;

import java.util.Collection;
import java.util.Set;

import org.atemsource.atem.api.BeanReferenceData.BeanReference;
import org.atemsource.atem.api.infrastructure.bean.Bean;

/**
*
* The BeanLocator is an application singleton that provides access to the dependency injection container components/beans.
*
* @author Stefan Meyer
*
*/
public abstract class BeanLocator
{
/**
* get access to di components from a plain pojo.
* @return the singleton instance
*/
	public static BeanLocator getInstance()
	{
		return null;
	}

/**
* get a bean reference by the bean reference definition.
* @param the bean definition
* @return a bean reference
*/
	public abstract Bean<?> getBean(BeanReferenceData beanReferenceData);

/**
* get a bean reference by the bean's class.
* @param the bean's class.
* @return a bean reference
*/
	public abstract <T> Bean<T> getBean(Class<T> beanType);

/**
* get a bean reference by the bean's name.
* @param the bean's name.
* @return a bean reference
*/
	public abstract Bean<?> getBean(String beanName);

/**
* get a bean' name.
* @param the bean.
* @return the beans's name
*/
	public abstract String getBeanName(Object object);

/**
* get all bean references for a certain bean class.
* @param the bean class.
* @return the beans' references
*/
	public abstract <T> Set<? extends Bean<T>> getBeans(Class<T> beanType);

/**
* get the bean by the reference data.
* @param the bean's reference.
* @return the bean's instance
*/
	public abstract Object getInstance(BeanReferenceData beanReferenceData);

/**
* get the bean by the bean's class.
* @param the bean's class.
* @return the bean's instance
*/
	public abstract <T> T getInstance(Class<T> beanType);

/**
* get the bean by the bean's name.
* @param the bean's name.
* @return the bean's instance
*/
	public abstract <T> T getInstance(String beanName);

/**
* get all beans of a certain class.
* @param the beans' class.
* @return the bean instances
*/
	public abstract <T> Collection<T> getInstances(Class<T> beanType);

/**
* remove the bean from the container.
* @param the bean
*/
	public abstract void remove(Bean<?> bean);

}
